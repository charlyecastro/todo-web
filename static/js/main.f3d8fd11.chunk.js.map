{"version":3,"sources":["components/listItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","todo","isDone","removeListItem","useState","isChecked","setChecked","isDeleting","setIsDeleting","onDelete","Axios","delete","process","then","res","data","console","log","catch","err","Item","actions","title","onConfirm","e","okText","cancelText","href","size","DeleteTwoTone","onChange","body","message","success","post","checked","App","list","setList","loading","setLoading","formRef","React","createRef","useEffect","fetchAll","get","Object","entries","window","location","reload","isBlank","str","test","className","style","width","textAlign","moment","Date","format","active","dataSource","renderItem","item","ref","onFinish","values","current","resetFields","error","updatedList","push","postItem","display","marginTop","flex","name","placeholder","type","htmlType","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3d8fd11.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { List, Checkbox, Popconfirm, message, Spin } from 'antd';\nimport 'antd/dist/antd.css';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport '../App.css';\nimport Axios from 'axios';\n\n\nfunction ListItem({ todo, isDone, removeListItem }) {\n    const [isChecked, setChecked] = useState(isDone)\n    const [isDeleting, setIsDeleting] = useState(false)\n    \n    const confirm = (e) => {\n        onDelete()\n    }\n\n    const onChange = () => {\n        setChecked(!isChecked)\n        let body = {}\n        body[todo] = !isChecked\n        if (!isChecked) {\n            message.success('Nice job!', 1);\n        }\n        Axios.post(`${process.env.REACT_APP_BASE_URL}/data`,\n            body,\n            { 'headers': { 'Content-Type': 'application/json' } })\n            .then(res => {\n                return res.data\n            })\n            .then(data => {\n                console.log(data)\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    const onDelete = () => {\n        setIsDeleting(true)\n        Axios.delete(`${process.env.REACT_APP_BASE_URL}/data/${todo}`)\n            .then(res => {\n                return res.data\n            })\n            .then(data => {\n                console.log(data)\n                removeListItem(todo);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    return (\n        <List.Item actions={[<Popconfirm title=\"Delete this task?\" onConfirm={confirm} okText=\"Yes\" cancelText=\"No\"> <a href=\"/#\"> {isDeleting ? <Spin size = {\"small\"}/> : <DeleteTwoTone />}</a></Popconfirm>]} >\n            <Checkbox onChange={onChange} checked={isChecked}>\n                {todo}\n            </Checkbox>\n        </List.Item>\n    )\n}\n\nexport default ListItem","import React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport moment from 'moment'\nimport { List, Input, Skeleton, message, Form, Button } from 'antd';\nimport ListItem from './components/listItem'\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nfunction App() {\n  const [list, setList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  // const [inputValue, setInputValue] = useState(true);\n  let formRef = React.createRef();\n\n  useEffect(() => {\n    fetchAll()\n  }, []);\n\n  const fetchAll = () => {\n    Axios.get(`${process.env.REACT_APP_BASE_URL}/all`)\n      .then(res => {\n        return res.data\n      })\n      .then(data => {\n        let list = Object.entries(data.data)\n        setList(list)\n        setLoading(false)\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  };\n\n  const removeListItem = (todo) => {\n    // const updatedList = list.filter(item => item[0] !== todo)\n    // console.log(updatedList)\n    // setList(updatedList)\n    window.location.reload(false);\n  }\n\n  const postItem = (body) => {\n    Axios.post(`${process.env.REACT_APP_BASE_URL}/data`,\n      body,\n      { 'headers': { 'Content-Type': 'application/json' } })\n      .then(res => {\n        return res.data\n      })\n      .then(data => {\n        console.log(data)\n\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  const addListItem = (values) => {\n    let todo = values.todo\n    formRef.current.resetFields();\n    if (!isBlank(todo)) {\n      let updatedList = [...list]\n      let item = [todo, \"FALSE\"]\n      updatedList.push(item)\n      console.log(updatedList)\n      setList(updatedList)\n      let body = {}\n      body[todo] = false\n      postItem(body)\n    } else {\n      message.error(\"Can't add an empty task\")\n    }\n  }\n\n  const isBlank = (str) => {\n    return (!str || /^\\s*$/.test(str));\n  }\n\n  return (\n    <div className=\"App\">\n      <main>\n        <h1 style={{ width: '100%', textAlign: \"left\" }}>Today, {moment(new Date()).format('D MMMM')}</h1>\n        {!loading ?\n          <div>\n            <List\n              size=\"small\"\n              dataSource={list}\n              renderItem={item =>\n                <ListItem todo={item[0]} isDone={item[1] === \"TRUE\"} removeListItem={removeListItem} />}\n            />\n          </div>\n          : <Skeleton active >\n          </Skeleton>}\n        <Form\n          ref={formRef}\n          onFinish={addListItem}\n          size={\"large\"}>\n          <div style={{ display: \"flex\", marginTop: '1rem' }}>\n            <Form.Item style={{ flex: 1 }} name=\"todo\">\n              <Input placeholder=\"e.g. Finish the star wars saga\" name=\"todo\" />\n            </Form.Item>\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\">Add Task</Button>\n            </Form.Item>\n          </div >\n        </Form>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}